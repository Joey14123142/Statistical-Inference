{
    "contents" : "---\ntitle: \"Mutagen Prediction\"\noutput: html_document\n---\n\n```{r}\nstart <- function(pkg){\n  npkg <- pkg[!(pkg %in% installed.packages()[,\"Package\"])]\n  if (length(npkg))\n    install.packages(npkg, dependencies = TRUE)\n  lapply(pkg, require, character.only=TRUE)\n}\n\npkgs <- c(\"ROCR\",\"rcdk\",\"randomForest\",\"MASS\",\"e1071\")\nstart(pkgs)\n\n\n# Parse smiles structures from the prefiltered dataset --------------------\n\ndat1<-read.csv(\"mutagendata.smi\",sep=\"\\t\",header=F) # smile + IDs + Outcomec\n# sum(dat1[,3]==\"mutagen\")/nrow(dat1) # 0.59\n\nsmi <-lapply(as.character(dat1$V1),parse.smiles) \ncmp.fp<-vector(\"list\",nrow(dat1))\n\n\n\n# Generate and save fingerprints in dataframe ---------------------------------------------------\n\nfor (i in 1:nrow(dat1)){\n  cmp.fp[i]<-lapply(smi[[i]][1],get.fingerprint,type=\"maccs\")\n}\n\nfpmac<-fp.to.matrix(cmp.fp)\n# colSums(fpmac)\n# fingerprints with the sum of 0 are removed\ncmp.finger<-as.data.frame(fpmac[,colSums(fpmac) != 0])\n\ndataset<-cbind(cmp.finger,dat1$V3)\ncolnames(dataset)[152]<-\"Outcome\"\n\n\n# Split dataset on 8:2 into training and test sets ------------------------\nmask <- sample(2, nrow(dataset), replace = TRUE, prob=c(0.8,0.2))\ntraining <- dataset[mask == 1,]\ntest <- dataset[mask == 2,]\n```\n\n## Bagging and Random Forest\n```{r}\nbag <- randomForest(Outcome~., training, mtry = 151, importance=TRUE)\nbag\n\nbag.pred <- predict(bag, newdata = test)\nplot(bag.pred, test$Outcome)\n(sum(bag.pred !=test$Outcome))^2/3514\n\nrf <- randomForest(Outcome~., training, mtry = 75, importance=TRUE)\nrf.pred <- predict(rf, newdata = test)\n(sum(rf.pred!= test$Outcome))^2/3514\nimportance(rf)\nvarImpPlot(rf)\n```\n\n\n\n## Support Vector Classifier\n```{r}\nset.seed(1)\ncosts <- tune(svm, Outcome~., data = training, kernel = \"linear\", \n              ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10)),\n              scale = FALSE)\nsummary(costs)\n\nbestsvm <- costs$best.model\nsummary(bestsvm)\n\nsvm.pred <- predict(bestsvm, test)\ntable(Prediction = svm.pred, Truth = test$Outcome)\n```\n\n## CV\n```{r}\nk <- 10 \nn= floor(nrow(training)/k)\nerr.rf<- rep(NA,k) \nerr.svm <- rep(NA, k)\n\nfor (i in 1:k){\n    s1 <- ((i-1)* n+1)\n    s2 <- (i*n)\n    subset <- s1:s2\n    cv.train <- training[-subset,]\n    cv.test <- training[subset,]\n    \n    rf.fit <- randomForest(x=cv.train[1:151],y= cv.train$Outcome)\n    rf.pred <- predict (rf.fit,newdata= cv.test[1:151],type<-\"prob\")\n    rf<-prediction(rf.pred[,2],cv.test$Outcome)\n    err.rf[i]<-performance(rf,\"auc\")@y.values[[1]]\n    print(paste(\"AUC for the fold\",i,\":\",err.rf[i]))\n    \n    svm.fit <- svm(x=cv.train[1:151],y= cv.train$Outcome, kernel = \"linear\", cost = 1, scale = FALSE,\n                   probability = TRUE)\n    svm.pred <- predict(svm.fit, newdata = cv.test[1:151], probability = TRUE, decision.values = TRUE)\n    probs <-  attr(svm.pred, \"probabilities\")[,2] \n    svm <- prediction(probs,cv.test$Outcome)\n    err.svm[i] <- performance(svm, \"auc\")@y.values[[1]]\n    print(paste(\"AUC for the fold\",i,\":\",err.svm[i]))\n}\n\nprint(paste(\"RandomForest Average AUC:\",mean(err.rf), \"SVM Average AUC:\", mean(err.svm)))\n```\n\n## Summary\n```{r}\nsummari = function(predict_label, actual_label, true_value, false_value) {\n  tp <- sum((predict_label == true_value) * (actual_label == true_value))\n  fp <- sum((predict_label == true_value) * (actual_label == false_value))\n  tn <- sum((predict_label == false_value) * (actual_label == false_value))\n  fn <- sum((predict_label == false_value) * (actual_label == true_value))\n  total <- tp + fp + tn + fn\n  accuracy <- (tp + tn) / total\n  sensitivity <- tp / (tp + fn)\n  specificity <- tn / (tn + fp)\n  precision <- tp / (tp + fp)\n  F1 <- 2*((precision*sensitivity)/(precision+sensitivity))\n  confusion_matrix <- matrix(c(tp, fp, fn, tn), 2, 2)\n  colnames(confusion_matrix) <- c(\"Predicted True\", \"Predicted False\")\n  rownames(confusion_matrix) <- c(\"Actual True\", \"Actual False\")\n  return(list(true_positive = tp,\n              false_positive = fp,\n              true_negative = tn,\n              false_negative = fn,\n              total = total,\n              confusion_matrix = confusion_matrix,\n              accuracy = accuracy,\n              sensitivity = sensitivity,\n              specificity = specificity,\n              precision = precision,\n              F1score = F1 ))\n}\n\nsum.bag <- summari(bag.pred, test$Outcome,'mutagen',\"nonmutagen\")\nsum.rf <- summari(rf.pred, test$Outcome,'mutagen',\"nonmutagen\")\nsum.svm <- summari(svm.pred, test$Outcome,'mutagen',\"nonmutagen\")\n\n```\n\n",
    "created" : 1452139198240.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2534357774",
    "id" : "C40452AD",
    "lastKnownWriteTime" : 1452142000,
    "path" : "~/Desktop/chemo/PredictiveModelingR/mutagen.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}